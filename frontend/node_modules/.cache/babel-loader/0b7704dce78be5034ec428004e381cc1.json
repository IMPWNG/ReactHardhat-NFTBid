{"ast":null,"code":"var _jsxFileName = \"/Users/ma/Desktop/DESKTOP/DEV/REACT-DEV/react-3D-card/react-3d-card/frontend/src/components/Dapp.jsx\";\nimport React from \"react\"; // We'll use ethers to interact with the Ethereum network and our contract\n\nimport { ethers } from \"ethers\"; // We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\n\nimport { ConnectWallet } from \"../ConnectWallet/ConnectWallet\"; // This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props); // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined\n    };\n    this.state = this.initialState;\n  }\n\n  render() {\n    // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the ConnectWallet component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n    if (!this.state.selectedAddress) {\n      return /*#__PURE__*/_jsxDEV(ConnectWallet, {\n        connectWallet: () => this._connectWallet(),\n        networkError: this.state.networkError,\n        dismiss: () => this._dismissNetworkError()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/ma/Desktop/DESKTOP/DEV/REACT-DEV/react-3D-card/react-3d-card/frontend/src/components/Dapp.jsx"],"names":["React","ethers","ConnectWallet","Dapp","Component","constructor","props","initialState","tokenData","undefined","selectedAddress","balance","txBeingSent","transactionError","networkError","state","render","_connectWallet","_dismissNetworkError"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,MAAT,QAAuB,QAAvB,C,CAEA;AACA;AAGA;AACA;AACA;;AAEA,SAASC,aAAT,QAA8B,gCAA9B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAmC;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAGf;AACA;;AACA,SAAKC,YAAL,GAAoB;AAChB;AACAC,MAAAA,SAAS,EAAEC,SAFK;AAGhB;AACAC,MAAAA,eAAe,EAAED,SAJD;AAKhBE,MAAAA,OAAO,EAAEF,SALO;AAMhB;AACAG,MAAAA,WAAW,EAAEH,SAPG;AAQhBI,MAAAA,gBAAgB,EAAEJ,SARF;AAShBK,MAAAA,YAAY,EAAEL;AATE,KAApB;AAYA,SAAKM,KAAL,GAAa,KAAKR,YAAlB;AACH;;AACDS,EAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI,CAAC,KAAKD,KAAL,CAAWL,eAAhB,EAAiC;AAC7B,0BACI,QAAC,aAAD;AACI,QAAA,aAAa,EAAE,MAAM,KAAKO,cAAL,EADzB;AAEI,QAAA,YAAY,EAAE,KAAKF,KAAL,CAAWD,YAF7B;AAGI,QAAA,OAAO,EAAE,MAAM,KAAKI,oBAAL;AAHnB;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH;AACJ;;AArCqC","sourcesContent":["import React from \"react\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\n\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\n\nimport { ConnectWallet } from \"../ConnectWallet/ConnectWallet\";\n\n// This component is in charge of doing these things:\n//   1. It connects to the user's wallet\n//   2. Initializes ethers and the Token contract\n//   3. Polls the user balance to keep it updated.\n//   4. Transfers tokens by sending transactions\n//   5. Renders the whole application\n//\n// Note that (3) and (4) are specific of this sample application, but they show\n// you how to keep your Dapp and contract's state in sync,  and how to send a\n// transaction.\n\nexport class Dapp extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // We store multiple things in Dapp's state.\n        // You don't need to follow this pattern, but it's an useful example.\n        this.initialState = {\n            // The info of the token (i.e. It's Name and symbol)\n            tokenData: undefined,\n            // The user's address and balance\n            selectedAddress: undefined,\n            balance: undefined,\n            // The ID about transactions being sent, and any possible error with them\n            txBeingSent: undefined,\n            transactionError: undefined,\n            networkError: undefined,\n        };\n\n        this.state = this.initialState;\n    }\n    render() {\n        // The next thing we need to do, is to ask the user to connect their wallet.\n        // When the wallet gets connected, we are going to save the users's address\n        // in the component's state. So, if it hasn't been saved yet, we have\n        // to show the ConnectWallet component.\n        //\n        // Note that we pass it a callback that is going to be called when the user\n        // clicks a button. This callback just calls the _connectWallet method.\n        if (!this.state.selectedAddress) {\n            return (\n                <ConnectWallet\n                    connectWallet={() => this._connectWallet()}\n                    networkError={this.state.networkError}\n                    dismiss={() => this._dismissNetworkError()}\n                />\n            );\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}