{"ast":null,"code":"var _jsxFileName = \"/Users/ma/Desktop/ReactHardhat-NFTBid/frontend/src/components/Dapp.jsx\";\nimport React from 'react'; // We'll use ethers to interact with the Ethereum network and our contract\n\nimport { ethers } from \"ethers\"; // We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\n\nimport TokenArtifact from \"../contracts/Token.json\";\nimport contractAddress from \"../contracts/contract-address.json\";\nimport { NoWalletDetected } from \"./noWalletDetected\";\nimport { ConnectWallet } from \"./connectWalletButton\";\nimport { Loading } from \"./loading\";\nimport { BunnyCard } from \"./bunnyCard\";\nimport \"../Dapp.css\";\nimport styled from \"styled-components\"; // This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HARDHAT_NETWORK_ID = '3'; // This is an error code that indicates that the user canceled a transaction\n\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\nconst AppContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #0f0c0d;\n`;\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props); // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined\n    };\n    this.state = this.initialState;\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return /*#__PURE__*/_jsxDEV(NoWalletDetected, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }, this);\n    } // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the ConnectWallet component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n\n\n    if (!this.state.selectedAddress) {\n      return /*#__PURE__*/_jsxDEV(ConnectWallet, {\n        connectWallet: () => this._connectWallet(),\n        networkError: this.state.networkError,\n        dismiss: () => this._dismissNetworkError()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this);\n    } // If the token data or the user's balance hasn't loaded yet, we show\n    // a loading component.\n\n\n    if (!this.state.tokenData || !this.state.balance) {\n      return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [this.state.tokenData.name, \" (\", this.state.tokenData.symbol, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Welcome \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: this.state.selectedAddress\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 23\n            }, this), \", you have\", \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: [this.state.balance.toString(), \" \", this.state.tokenData.symbol]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(BunnyCard, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  }\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable(); // Once we have the address, we can initialize the application.\n    // First we check the network\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress); // We reinitialize it whenever the user changes their account.\n\n\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData(); // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n\n\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    }); // We reset the dapp state if the network is changed\n\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress\n    }); // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n\n    this._intializeEthers();\n\n    this._getTokenData();\n\n    this._startPollingData();\n  }\n\n  async _intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers.providers.Web3Provider(window.ethereum); // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n\n    this._token = new ethers.Contract(contractAddress.Token, TokenArtifact.abi, this._provider.getSigner(0));\n  } // The next to methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n\n\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000); // We run it once immediately so we don't have to wait for it\n\n    this._updateBalance();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  } // The next two methods just read from the contract and store the results\n  // in the component state.\n\n\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n    this.setState({\n      tokenData: {\n        name,\n        symbol\n      }\n    });\n  }\n\n  async _updateBalance() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({\n      balance\n    });\n  } // This is an utility method that turns an RPC error into a human readable\n  // message.\n\n\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  } // This method resets the state\n\n\n  _resetState() {\n    this.setState(this.initialState);\n  } // This method checks if Metamask selected network is Localhost:8545 \n\n\n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/Users/ma/Desktop/ReactHardhat-NFTBid/frontend/src/components/Dapp.jsx"],"names":["React","ethers","TokenArtifact","contractAddress","NoWalletDetected","ConnectWallet","Loading","BunnyCard","styled","HARDHAT_NETWORK_ID","ERROR_CODE_TX_REJECTED_BY_USER","AppContainer","div","Dapp","Component","constructor","props","initialState","tokenData","undefined","selectedAddress","balance","txBeingSent","transactionError","networkError","state","render","window","ethereum","_connectWallet","_dismissNetworkError","name","symbol","toString","componentWillUnmount","_stopPollingData","enable","_checkNetwork","_initialize","on","newAddress","_resetState","networkId","userAddress","setState","_intializeEthers","_getTokenData","_startPollingData","_provider","providers","Web3Provider","_token","Contract","Token","abi","getSigner","_pollDataInterval","setInterval","_updateBalance","clearInterval","balanceOf","_getRpcErrorMessage","error","data","message","networkVersion"],"mappings":"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","sourcesContent":["import React from 'react';\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\n// We import the contract's artifacts and address here, as we are going to be\n// using them with ethers\nimport TokenArtifact from \"../contracts/Token.json\";\nimport contractAddress from \"../contracts/contract-address.json\";\n\nimport { NoWalletDetected } from \"./noWalletDetected\";\nimport { ConnectWallet } from \"./connectWalletButton\";\nimport { Loading } from \"./loading\";\nimport { BunnyCard } from \"./bunnyCard\";\n\n\nimport \"../Dapp.css\";\n\nimport styled from \"styled-components\";\n\n// This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst HARDHAT_NETWORK_ID = '3';\n// This is an error code that indicates that the user canceled a transaction\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\n\nconst AppContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #0f0c0d;\n`;\n\nexport class Dapp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined,\n    };\n\n    this.state = this.initialState;\n  }\n\n  render() {\n    // Ethereum wallets inject the window.ethereum object. If it hasn't been\n    // injected, we instruct the user to install MetaMask.\n    if (window.ethereum === undefined) {\n      return <NoWalletDetected />;\n    }\n\n    // The next thing we need to do, is to ask the user to connect their wallet.\n    // When the wallet gets connected, we are going to save the users's address\n    // in the component's state. So, if it hasn't been saved yet, we have\n    // to show the ConnectWallet component.\n    //\n    // Note that we pass it a callback that is going to be called when the user\n    // clicks a button. This callback just calls the _connectWallet method.\n    if (!this.state.selectedAddress) {\n      return (\n        <ConnectWallet\n          connectWallet={() => this._connectWallet()}\n          networkError={this.state.networkError}\n          dismiss={() => this._dismissNetworkError()}\n        />\n      );\n      \n    }\n\n    // If the token data or the user's balance hasn't loaded yet, we show\n    // a loading component.\n    if (!this.state.tokenData || !this.state.balance) {\n      return <Loading />;\n    }\n    return (\n      <div className=\"container p-4\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <h1>\n              {this.state.tokenData.name} ({this.state.tokenData.symbol})\n            </h1>\n            <p>\n              Welcome <b>{this.state.selectedAddress}</b>, you have{\" \"}\n              <b>\n                {this.state.balance.toString()} {this.state.tokenData.symbol}\n              </b>\n              <BunnyCard />\n            </p>\n          </div>\n        </div>\n\n        <hr/> \n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable();\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress,\n    });\n\n    // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n    this._intializeEthers();\n    this._getTokenData();\n    this._startPollingData();\n  }\n\n  async _intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n    this._token = new ethers.Contract(\n      contractAddress.Token,\n      TokenArtifact.abi,\n      this._provider.getSigner(0)\n    );\n  }\n\n  // The next to methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000);\n\n    // We run it once immediately so we don't have to wait for it\n    this._updateBalance();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  // The next two methods just read from the contract and store the results\n  // in the component state.\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n\n    this.setState({ tokenData: { name, symbol } });\n  }\n\n  async _updateBalance() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({ balance });\n  }\n\n\n  // This is an utility method that turns an RPC error into a human readable\n  // message.\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  // This method resets the state\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545 \n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}