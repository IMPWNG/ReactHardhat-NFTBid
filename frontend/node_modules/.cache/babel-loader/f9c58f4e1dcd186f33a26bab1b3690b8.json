{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Interface = exports.Indexed = exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = void 0;\n\nvar address_1 = require(\"@ethersproject/address\");\n\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\n\nvar bytes_1 = require(\"@ethersproject/bytes\");\n\nvar hash_1 = require(\"@ethersproject/hash\");\n\nvar keccak256_1 = require(\"@ethersproject/keccak256\");\n\nvar properties_1 = require(\"@ethersproject/properties\");\n\nvar abi_coder_1 = require(\"./abi-coder\");\n\nvar abstract_coder_1 = require(\"./coders/abstract-coder\");\n\nObject.defineProperty(exports, \"checkResultErrors\", {\n  enumerable: true,\n  get: function () {\n    return abstract_coder_1.checkResultErrors;\n  }\n});\n\nvar fragments_1 = require(\"./fragments\");\n\nvar logger_1 = require(\"@ethersproject/logger\");\n\nvar _version_1 = require(\"./_version\");\n\nvar logger = new logger_1.Logger(_version_1.version);\n\nvar LogDescription =\n/** @class */\nfunction (_super) {\n  __extends(LogDescription, _super);\n\n  function LogDescription() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return LogDescription;\n}(properties_1.Description);\n\nexports.LogDescription = LogDescription;\n\nvar TransactionDescription =\n/** @class */\nfunction (_super) {\n  __extends(TransactionDescription, _super);\n\n  function TransactionDescription() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return TransactionDescription;\n}(properties_1.Description);\n\nexports.TransactionDescription = TransactionDescription;\n\nvar Indexed =\n/** @class */\nfunction (_super) {\n  __extends(Indexed, _super);\n\n  function Indexed() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Indexed.isIndexed = function (value) {\n    return !!(value && value._isIndexed);\n  };\n\n  return Indexed;\n}(properties_1.Description);\n\nexports.Indexed = Indexed;\n\nfunction wrapAccessError(property, error) {\n  var wrap = new Error(\"deferred error during ABI decoding triggered accessing \" + property);\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\n\n\nvar Interface =\n/** @class */\nfunction () {\n  function Interface(fragments) {\n    var _newTarget = this.constructor;\n\n    var _this = this;\n\n    logger.checkNew(_newTarget, Interface);\n    var abi = [];\n\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n\n    properties_1.defineReadOnly(this, \"fragments\", abi.map(function (fragment) {\n      return fragments_1.Fragment.from(fragment);\n    }).filter(function (fragment) {\n      return fragment != null;\n    }));\n    properties_1.defineReadOnly(this, \"_abiCoder\", properties_1.getStatic(_newTarget, \"getAbiCoder\")());\n    properties_1.defineReadOnly(this, \"functions\", {});\n    properties_1.defineReadOnly(this, \"errors\", {});\n    properties_1.defineReadOnly(this, \"events\", {});\n    properties_1.defineReadOnly(this, \"structs\", {}); // Add all fragments by their signature\n\n    this.fragments.forEach(function (fragment) {\n      var bucket = null;\n\n      switch (fragment.type) {\n        case \"constructor\":\n          if (_this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          } //checkNames(fragment, \"input\", fragment.inputs);\n\n\n          properties_1.defineReadOnly(_this, \"deploy\", fragment);\n          return;\n\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = _this.functions;\n          break;\n\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = _this.events;\n          break;\n\n        default:\n          return;\n      }\n\n      var signature = fragment.format();\n\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n\n      bucket[signature] = fragment;\n    }); // If we do not have a constructor add a default\n\n    if (!this.deploy) {\n      properties_1.defineReadOnly(this, \"deploy\", fragments_1.ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n\n    properties_1.defineReadOnly(this, \"_isInterface\", true);\n  }\n\n  Interface.prototype.format = function (format) {\n    if (!format) {\n      format = fragments_1.FormatTypes.full;\n    }\n\n    if (format === fragments_1.FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n    }\n\n    var abi = this.fragments.map(function (fragment) {\n      return fragment.format(format);\n    }); // We need to re-bundle the JSON fragments a bit\n\n    if (format === fragments_1.FormatTypes.json) {\n      return JSON.stringify(abi.map(function (j) {\n        return JSON.parse(j);\n      }));\n    }\n\n    return abi;\n  }; // Sub-classes can override these to handle other blockchains\n\n\n  Interface.getAbiCoder = function () {\n    return abi_coder_1.defaultAbiCoder;\n  };\n\n  Interface.getAddress = function (address) {\n    return address_1.getAddress(address);\n  };\n\n  Interface.getSighash = function (functionFragment) {\n    return bytes_1.hexDataSlice(hash_1.id(functionFragment.format()), 0, 4);\n  };\n\n  Interface.getEventTopic = function (eventFragment) {\n    return hash_1.id(eventFragment.format());\n  }; // Find a function definition by any means necessary (unless it is ambiguous)\n\n\n  Interface.prototype.getFunction = function (nameOrSignatureOrSighash) {\n    if (bytes_1.isHexString(nameOrSignatureOrSighash)) {\n      for (var name_1 in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name_1)) {\n          return this.functions[name_1];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      var name_2 = nameOrSignatureOrSighash.trim();\n      var matching = Object.keys(this.functions).filter(function (f) {\n        return f.split(\"(\"\n        /* fix:) */\n        )[0] === name_2;\n      });\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name_2);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name_2);\n      }\n\n      return this.functions[matching[0]];\n    } // Normlize the signature and lookup the function\n\n\n    var result = this.functions[fragments_1.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n\n    return result;\n  }; // Find an event definition by any means necessary (unless it is ambiguous)\n\n\n  Interface.prototype.getEvent = function (nameOrSignatureOrTopic) {\n    if (bytes_1.isHexString(nameOrSignatureOrTopic)) {\n      var topichash = nameOrSignatureOrTopic.toLowerCase();\n\n      for (var name_3 in this.events) {\n        if (topichash === this.getEventTopic(name_3)) {\n          return this.events[name_3];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      var name_4 = nameOrSignatureOrTopic.trim();\n      var matching = Object.keys(this.events).filter(function (f) {\n        return f.split(\"(\"\n        /* fix:) */\n        )[0] === name_4;\n      });\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name_4);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name_4);\n      }\n\n      return this.events[matching[0]];\n    } // Normlize the signature and lookup the function\n\n\n    var result = this.events[fragments_1.EventFragment.fromString(nameOrSignatureOrTopic).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n\n    return result;\n  }; // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n\n\n  Interface.prototype.getSighash = function (functionFragment) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return properties_1.getStatic(this.constructor, \"getSighash\")(functionFragment);\n  }; // Get the topic (the bytes32 hash) used by Solidity to identify an event\n\n\n  Interface.prototype.getEventTopic = function (eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    return properties_1.getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  };\n\n  Interface.prototype._decodeParams = function (params, data) {\n    return this._abiCoder.decode(params, data);\n  };\n\n  Interface.prototype._encodeParams = function (params, values) {\n    return this._abiCoder.encode(params, values);\n  };\n\n  Interface.prototype.encodeDeploy = function (values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  }; // Decode the data for a function call (e.g. tx.data)\n\n\n  Interface.prototype.decodeFunctionData = function (functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    var bytes = bytes_1.arrayify(data);\n\n    if (bytes_1.hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(\"data signature does not match function \" + functionFragment.name + \".\", \"data\", bytes_1.hexlify(bytes));\n    }\n\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  }; // Encode the data for a function call (e.g. tx.data)\n\n\n  Interface.prototype.encodeFunctionData = function (functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return bytes_1.hexlify(bytes_1.concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  }; // Decode the result from a function call (e.g. from eth_call)\n\n\n  Interface.prototype.decodeFunctionResult = function (functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    var bytes = bytes_1.arrayify(data);\n    var reason = null;\n    var errorSignature = null;\n\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n\n        break;\n\n      case 4:\n        if (bytes_1.hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n          errorSignature = \"Error(string)\";\n          reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n        }\n\n        break;\n    }\n\n    return logger.throwError(\"call revert exception\", logger_1.Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      errorSignature: errorSignature,\n      errorArgs: [reason],\n      reason: reason\n    });\n  }; // Encode the result for a function call (e.g. for eth_call)\n\n\n  Interface.prototype.encodeFunctionResult = function (functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return bytes_1.hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  }; // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n\n\n  Interface.prototype.encodeFilterTopics = function (eventFragment, values) {\n    var _this = this;\n\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n\n    var topics = [];\n\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n\n    var encodeTopic = function (param, value) {\n      if (param.type === \"string\") {\n        return hash_1.id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256_1.keccak256(bytes_1.hexlify(value));\n      } // Check addresses are valid\n\n\n      if (param.type === \"address\") {\n        _this._abiCoder.encode([\"address\"], [value]);\n      }\n\n      return bytes_1.hexZeroPad(bytes_1.hexlify(value), 32);\n    };\n\n    values.forEach(function (value, index) {\n      var param = eventFragment.inputs[index];\n\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n\n        return;\n      }\n\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(function (value) {\n          return encodeTopic(param, value);\n        }));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    }); // Trim off trailing nulls\n\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n\n    return topics;\n  };\n\n  Interface.prototype.encodeEventLog = function (eventFragment, values) {\n    var _this = this;\n\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    var topics = [];\n    var dataTypes = [];\n    var dataValues = [];\n\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n\n    if (values.length !== eventFragment.inputs.length) {\n      logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n    }\n\n    eventFragment.inputs.forEach(function (param, index) {\n      var value = values[index];\n\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(hash_1.id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256_1.keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TOOD\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(_this._abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this._abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  }; // Decode a filter for the event and the search criteria\n\n\n  Interface.prototype.decodeEventLog = function (eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (topics != null && !eventFragment.anonymous) {\n      var topicHash = this.getEventTopic(eventFragment);\n\n      if (!bytes_1.isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", logger_1.Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n\n      topics = topics.slice(1);\n    }\n\n    var indexed = [];\n    var nonIndexed = [];\n    var dynamic = [];\n    eventFragment.inputs.forEach(function (param, index) {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(fragments_1.ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    var resultIndexed = topics != null ? this._abiCoder.decode(indexed, bytes_1.concat(topics)) : null;\n\n    var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n    var result = [];\n    var nonIndexedIndex = 0,\n        indexedIndex = 0;\n    eventFragment.inputs.forEach(function (param, index) {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          try {\n            result[index] = resultIndexed[indexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n      } else {\n        try {\n          result[index] = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          result[index] = error;\n        }\n      } // Add the keyword argument if named and safe\n\n\n      if (param.name && result[param.name] == null) {\n        var value_1 = result[index]; // Make error named values throw on access\n\n        if (value_1 instanceof Error) {\n          Object.defineProperty(result, param.name, {\n            get: function () {\n              throw wrapAccessError(\"property \" + JSON.stringify(param.name), value_1);\n            }\n          });\n        } else {\n          result[param.name] = value_1;\n        }\n      }\n    });\n\n    var _loop_1 = function (i) {\n      var value = result[i];\n\n      if (value instanceof Error) {\n        Object.defineProperty(result, i, {\n          get: function () {\n            throw wrapAccessError(\"index \" + i, value);\n          }\n        });\n      }\n    }; // Make all error indexed values throw on access\n\n\n    for (var i = 0; i < result.length; i++) {\n      _loop_1(i);\n    }\n\n    return Object.freeze(result);\n  }; // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n\n\n  Interface.prototype.parseTransaction = function (tx) {\n    var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n\n    if (!fragment) {\n      return null;\n    }\n\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: bignumber_1.BigNumber.from(tx.value || \"0\")\n    });\n  }; // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n\n\n  Interface.prototype.parseLog = function (log) {\n    var fragment = this.getEvent(log.topics[0]);\n\n    if (!fragment || fragment.anonymous) {\n      return null;\n    } // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe jsut a fragment?\n\n\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  };\n  /*\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n      if (Interface.isInterface(value)) {\n          return value;\n      }\n      if (typeof(value) === \"string\") {\n          return new Interface(JSON.parse(value));\n      }\n      return new Interface(value);\n  }\n  */\n\n\n  Interface.isInterface = function (value) {\n    return !!(value && value._isInterface);\n  };\n\n  return Interface;\n}();\n\nexports.Interface = Interface;","map":{"version":3,"sources":["../src.ts/interface.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Interface = exports.Indexed = exports.TransactionDescription = exports.LogDescription = exports.checkResultErrors = void 0;\nvar address_1 = require(\"@ethersproject/address\");\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\nvar bytes_1 = require(\"@ethersproject/bytes\");\nvar hash_1 = require(\"@ethersproject/hash\");\nvar keccak256_1 = require(\"@ethersproject/keccak256\");\nvar properties_1 = require(\"@ethersproject/properties\");\nvar abi_coder_1 = require(\"./abi-coder\");\nvar abstract_coder_1 = require(\"./coders/abstract-coder\");\nObject.defineProperty(exports, \"checkResultErrors\", { enumerable: true, get: function () { return abstract_coder_1.checkResultErrors; } });\nvar fragments_1 = require(\"./fragments\");\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar LogDescription = /** @class */ (function (_super) {\n    __extends(LogDescription, _super);\n    function LogDescription() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return LogDescription;\n}(properties_1.Description));\nexports.LogDescription = LogDescription;\nvar TransactionDescription = /** @class */ (function (_super) {\n    __extends(TransactionDescription, _super);\n    function TransactionDescription() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return TransactionDescription;\n}(properties_1.Description));\nexports.TransactionDescription = TransactionDescription;\nvar Indexed = /** @class */ (function (_super) {\n    __extends(Indexed, _super);\n    function Indexed() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Indexed.isIndexed = function (value) {\n        return !!(value && value._isIndexed);\n    };\n    return Indexed;\n}(properties_1.Description));\nexports.Indexed = Indexed;\nfunction wrapAccessError(property, error) {\n    var wrap = new Error(\"deferred error during ABI decoding triggered accessing \" + property);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nvar Interface = /** @class */ (function () {\n    function Interface(fragments) {\n        var _newTarget = this.constructor;\n        var _this = this;\n        logger.checkNew(_newTarget, Interface);\n        var abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        properties_1.defineReadOnly(this, \"fragments\", abi.map(function (fragment) {\n            return fragments_1.Fragment.from(fragment);\n        }).filter(function (fragment) { return (fragment != null); }));\n        properties_1.defineReadOnly(this, \"_abiCoder\", properties_1.getStatic((_newTarget), \"getAbiCoder\")());\n        properties_1.defineReadOnly(this, \"functions\", {});\n        properties_1.defineReadOnly(this, \"errors\", {});\n        properties_1.defineReadOnly(this, \"events\", {});\n        properties_1.defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach(function (fragment) {\n            var bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (_this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    properties_1.defineReadOnly(_this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = _this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = _this.events;\n                    break;\n                default:\n                    return;\n            }\n            var signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            properties_1.defineReadOnly(this, \"deploy\", fragments_1.ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        properties_1.defineReadOnly(this, \"_isInterface\", true);\n    }\n    Interface.prototype.format = function (format) {\n        if (!format) {\n            format = fragments_1.FormatTypes.full;\n        }\n        if (format === fragments_1.FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        var abi = this.fragments.map(function (fragment) { return fragment.format(format); });\n        // We need to re-bundle the JSON fragments a bit\n        if (format === fragments_1.FormatTypes.json) {\n            return JSON.stringify(abi.map(function (j) { return JSON.parse(j); }));\n        }\n        return abi;\n    };\n    // Sub-classes can override these to handle other blockchains\n    Interface.getAbiCoder = function () {\n        return abi_coder_1.defaultAbiCoder;\n    };\n    Interface.getAddress = function (address) {\n        return address_1.getAddress(address);\n    };\n    Interface.getSighash = function (functionFragment) {\n        return bytes_1.hexDataSlice(hash_1.id(functionFragment.format()), 0, 4);\n    };\n    Interface.getEventTopic = function (eventFragment) {\n        return hash_1.id(eventFragment.format());\n    };\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    Interface.prototype.getFunction = function (nameOrSignatureOrSighash) {\n        if (bytes_1.isHexString(nameOrSignatureOrSighash)) {\n            for (var name_1 in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name_1)) {\n                    return this.functions[name_1];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            var name_2 = nameOrSignatureOrSighash.trim();\n            var matching = Object.keys(this.functions).filter(function (f) { return (f.split(\"(\" /* fix:) */)[0] === name_2); });\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name_2);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name_2);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        var result = this.functions[fragments_1.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    };\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    Interface.prototype.getEvent = function (nameOrSignatureOrTopic) {\n        if (bytes_1.isHexString(nameOrSignatureOrTopic)) {\n            var topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (var name_3 in this.events) {\n                if (topichash === this.getEventTopic(name_3)) {\n                    return this.events[name_3];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            var name_4 = nameOrSignatureOrTopic.trim();\n            var matching = Object.keys(this.events).filter(function (f) { return (f.split(\"(\" /* fix:) */)[0] === name_4); });\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name_4);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name_4);\n            }\n            return this.events[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        var result = this.events[fragments_1.EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    };\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    Interface.prototype.getSighash = function (functionFragment) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return properties_1.getStatic(this.constructor, \"getSighash\")(functionFragment);\n    };\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    Interface.prototype.getEventTopic = function (eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return properties_1.getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    };\n    Interface.prototype._decodeParams = function (params, data) {\n        return this._abiCoder.decode(params, data);\n    };\n    Interface.prototype._encodeParams = function (params, values) {\n        return this._abiCoder.encode(params, values);\n    };\n    Interface.prototype.encodeDeploy = function (values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    };\n    // Decode the data for a function call (e.g. tx.data)\n    Interface.prototype.decodeFunctionData = function (functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        var bytes = bytes_1.arrayify(data);\n        if (bytes_1.hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(\"data signature does not match function \" + functionFragment.name + \".\", \"data\", bytes_1.hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    };\n    // Encode the data for a function call (e.g. tx.data)\n    Interface.prototype.encodeFunctionData = function (functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return bytes_1.hexlify(bytes_1.concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    };\n    // Decode the result from a function call (e.g. from eth_call)\n    Interface.prototype.decodeFunctionResult = function (functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        var bytes = bytes_1.arrayify(data);\n        var reason = null;\n        var errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4:\n                if (bytes_1.hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n                    errorSignature = \"Error(string)\";\n                    reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n                }\n                break;\n        }\n        return logger.throwError(\"call revert exception\", logger_1.Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            errorSignature: errorSignature,\n            errorArgs: [reason],\n            reason: reason\n        });\n    };\n    // Encode the result for a function call (e.g. for eth_call)\n    Interface.prototype.encodeFunctionResult = function (functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return bytes_1.hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    };\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    Interface.prototype.encodeFilterTopics = function (eventFragment, values) {\n        var _this = this;\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), logger_1.Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        var topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        var encodeTopic = function (param, value) {\n            if (param.type === \"string\") {\n                return hash_1.id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256_1.keccak256(bytes_1.hexlify(value));\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                _this._abiCoder.encode([\"address\"], [value]);\n            }\n            return bytes_1.hexZeroPad(bytes_1.hexlify(value), 32);\n        };\n        values.forEach(function (value, index) {\n            var param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map(function (value) { return encodeTopic(param, value); }));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    };\n    Interface.prototype.encodeEventLog = function (eventFragment, values) {\n        var _this = this;\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        var topics = [];\n        var dataTypes = [];\n        var dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach(function (param, index) {\n            var value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(hash_1.id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256_1.keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TOOD\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(_this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    };\n    // Decode a filter for the event and the search criteria\n    Interface.prototype.decodeEventLog = function (eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            var topicHash = this.getEventTopic(eventFragment);\n            if (!bytes_1.isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", logger_1.Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        var indexed = [];\n        var nonIndexed = [];\n        var dynamic = [];\n        eventFragment.inputs.forEach(function (param, index) {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(fragments_1.ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        var resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, bytes_1.concat(topics)) : null;\n        var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        var result = [];\n        var nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach(function (param, index) {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                var value_1 = result[index];\n                // Make error named values throw on access\n                if (value_1 instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        get: function () { throw wrapAccessError(\"property \" + JSON.stringify(param.name), value_1); }\n                    });\n                }\n                else {\n                    result[param.name] = value_1;\n                }\n            }\n        });\n        var _loop_1 = function (i) {\n            var value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    get: function () { throw wrapAccessError(\"index \" + i, value); }\n                });\n            }\n        };\n        // Make all error indexed values throw on access\n        for (var i = 0; i < result.length; i++) {\n            _loop_1(i);\n        }\n        return Object.freeze(result);\n    };\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    Interface.prototype.parseTransaction = function (tx) {\n        var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: bignumber_1.BigNumber.from(tx.value || \"0\"),\n        });\n    };\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    Interface.prototype.parseLog = function (log) {\n        var fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe jsut a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    };\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    Interface.isInterface = function (value) {\n        return !!(value && value._isInterface);\n    };\n    return Interface;\n}());\nexports.Interface = Interface;\n//# sourceMappingURL=interface.js.map"]},"metadata":{},"sourceType":"script"}