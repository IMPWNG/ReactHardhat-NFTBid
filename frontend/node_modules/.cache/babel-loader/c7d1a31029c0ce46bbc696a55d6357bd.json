{"ast":null,"code":"var _jsxFileName = \"/Users/ma/Desktop/DESKTOP/DEV/REACT-DEV/react-3D-card/react-3d-card/frontend/src/components/Dapp.jsx\";\nimport React from 'react'; // We'll use ethers to interact with the Ethereum network and our contract\n\nimport { ethers } from \"ethers\"; // All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\n\nimport { ConnectWallet } from \"./connectWalletButton\";\nimport \"../Dapp.css\";\nimport styled from \"styled-components\";\nimport { BunnyCard } from \"./bunnyCard\"; // This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\n\nconst HARDHAT_NETWORK_ID = '31337'; // This is an error code that indicates that the user canceled a transaction\n\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\nconst AppContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #0f0c0d;\n`;\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(AppContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ConnectWallet, {\n    connectWallet: () => this._connectWallet(),\n    networkError: this.state.networkError,\n    dismiss: () => this._dismissNetworkError(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(BunnyCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;\nexport class Dapp extends React.Component {\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable(); // Once we have the address, we can initialize the application.\n    // First we check the network\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress); // We reinitialize it whenever the user changes their account.\n\n\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData(); // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n\n\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    }); // We reset the dapp state if the network is changed\n\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress\n    }); // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n\n    this._intializeEthers();\n\n    this._getTokenData();\n\n    this._startPollingData();\n  }\n\n  async _intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers.providers.Web3Provider(window.ethereum); // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n  } // The next to methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n\n\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000); // We run it once immediately so we don't have to wait for it\n\n    this._updateBalance();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  } // The next two methods just read from the contract and store the results\n  // in the component state.\n\n\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n    this.setState({\n      tokenData: {\n        name,\n        symbol\n      }\n    });\n  }\n\n  async _updateBalance() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({\n      balance\n    });\n  } // This method sends an ethereum transaction to transfer tokens.\n  // While this action is specific to this application, it illustrates how to\n  // send a transaction.\n\n\n  async _transferTokens(to, amount) {\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError(); // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n\n\n      const tx = await this._token.transfer(to, amount);\n      this.setState({\n        txBeingSent: tx.hash\n      }); // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n\n      const receipt = await tx.wait(); // The receipt, contains a status flag, which is 0 to indicate an error.\n\n      if (receipt.status === 0) {\n        // We can't know the exact error that make the transaction fail once it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      } // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n\n\n      await this._updateBalance();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      } // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n\n\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  } // This method just clears part of the state.\n\n\n  _dismissTransactionError() {\n    this.setState({\n      transactionError: undefined\n    });\n  } // This method just clears part of the state.\n\n\n  _dismissNetworkError() {\n    this.setState({\n      networkError: undefined\n    });\n  } // This is an utility method that turns an RPC error into a human readable\n  // message.\n\n\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  } // This method resets the state\n\n\n  _resetState() {\n    this.setState(this.initialState);\n  } // This method checks if Metamask selected network is Localhost:8545 \n\n\n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/Users/ma/Desktop/DESKTOP/DEV/REACT-DEV/react-3D-card/react-3d-card/frontend/src/components/Dapp.jsx"],"names":["React","ethers","ConnectWallet","styled","BunnyCard","HARDHAT_NETWORK_ID","ERROR_CODE_TX_REJECTED_BY_USER","AppContainer","div","App","_connectWallet","state","networkError","_dismissNetworkError","Dapp","Component","selectedAddress","window","ethereum","enable","_checkNetwork","_initialize","on","newAddress","_stopPollingData","undefined","_resetState","networkId","userAddress","setState","_intializeEthers","_getTokenData","_startPollingData","_provider","providers","Web3Provider","_pollDataInterval","setInterval","_updateBalance","clearInterval","name","_token","symbol","tokenData","balance","balanceOf","_transferTokens","to","amount","_dismissTransactionError","tx","transfer","txBeingSent","hash","receipt","wait","status","Error","error","code","console","transactionError","_getRpcErrorMessage","data","message","initialState","networkVersion"],"mappings":"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","sourcesContent":["import React from 'react';\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\n\n\n\n\n// All the logic of this dapp is contained in the Dapp component.\n// These other components are just presentational ones: they don't have any\n// logic. They just render HTML.\nimport { ConnectWallet } from \"./connectWalletButton\";\n\nimport \"../Dapp.css\";\nimport styled from \"styled-components\";\nimport { BunnyCard } from \"./bunnyCard\";\n\n// This is the Hardhat Network id, you might change it in the hardhat.config.js\n// Here's a list of network ids https://docs.metamask.io/guide/ethereum-provider.html#properties\n// to use when deploying to other networks.\nconst HARDHAT_NETWORK_ID = '31337';\n\n// This is an error code that indicates that the user canceled a transaction\nconst ERROR_CODE_TX_REJECTED_BY_USER = 4001;\n\n\nconst AppContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #0f0c0d;\n`;\n\nfunction App() {\n  return (\n\n    <AppContainer>\n      <ConnectWallet connectWallet={() => this._connectWallet()}\n        networkError={this.state.networkError}\n        dismiss={() => this._dismissNetworkError()}/>\n      <BunnyCard />\n    </AppContainer>\n  );\n}\n\nexport default App;\n\nexport class Dapp extends React.Component {\n\n\n\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable();\n\n    // Once we have the address, we can initialize the application.\n\n    // First we check the network\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress);\n\n    // We reinitialize it whenever the user changes their account.\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData();\n      // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    });\n\n    // We reset the dapp state if the network is changed\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress,\n    });\n\n    // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n    this._intializeEthers();\n    this._getTokenData();\n    this._startPollingData();\n  }\n\n  async _intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n\n  }\n\n  // The next to methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000);\n\n    // We run it once immediately so we don't have to wait for it\n    this._updateBalance();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  }\n\n  // The next two methods just read from the contract and store the results\n  // in the component state.\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n\n    this.setState({ tokenData: { name, symbol } });\n  }\n\n  async _updateBalance() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({ balance });\n  }\n\n  // This method sends an ethereum transaction to transfer tokens.\n  // While this action is specific to this application, it illustrates how to\n  // send a transaction.\n  async _transferTokens(to, amount) {\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError();\n\n      // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n      const tx = await this._token.transfer(to, amount);\n      this.setState({ txBeingSent: tx.hash });\n\n      // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n      const receipt = await tx.wait();\n\n      // The receipt, contains a status flag, which is 0 to indicate an error.\n      if (receipt.status === 0) {\n        // We can't know the exact error that make the transaction fail once it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      }\n\n      // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n      await this._updateBalance();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      if (error.code === ERROR_CODE_TX_REJECTED_BY_USER) {\n        return;\n      }\n\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({ transactionError: error });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({ txBeingSent: undefined });\n    }\n  }\n\n  // This method just clears part of the state.\n  _dismissTransactionError() {\n    this.setState({ transactionError: undefined });\n  }\n\n  // This method just clears part of the state.\n  _dismissNetworkError() {\n    this.setState({ networkError: undefined });\n  }\n\n  // This is an utility method that turns an RPC error into a human readable\n  // message.\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  }\n\n  // This method resets the state\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n  // This method checks if Metamask selected network is Localhost:8545 \n  _checkNetwork() {\n    if (window.ethereum.networkVersion === HARDHAT_NETWORK_ID) {\n      return true;\n    }\n\n    this.setState({\n      networkError: 'Please connect Metamask to Localhost:8545'\n    });\n\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}