{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FunctionFragment = exports.ConstructorFragment = exports.EventFragment = exports.Fragment = exports.ParamType = exports.FormatTypes = void 0;\n\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\n\nvar properties_1 = require(\"@ethersproject/properties\");\n\nvar logger_1 = require(\"@ethersproject/logger\");\n\nvar _version_1 = require(\"./_version\");\n\nvar logger = new logger_1.Logger(_version_1.version);\n;\nvar _constructorGuard = {};\nvar ModifiersBytes = {\n  calldata: true,\n  memory: true,\n  storage: true\n};\nvar ModifiersNest = {\n  calldata: true,\n  memory: true\n};\n\nfunction checkModifier(type, name) {\n  if (type === \"bytes\" || type === \"string\") {\n    if (ModifiersBytes[name]) {\n      return true;\n    }\n  } else if (type === \"address\") {\n    if (name === \"payable\") {\n      return true;\n    }\n  } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n    if (ModifiersNest[name]) {\n      return true;\n    }\n  }\n\n  if (ModifiersBytes[name] || name === \"payable\") {\n    logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n  }\n\n  return false;\n} // @TODO: Make sure that children of an indexed tuple are marked with a null indexed\n\n\nfunction parseParamType(param, allowIndexed) {\n  var originalParam = param;\n\n  function throwError(i) {\n    logger.throwArgumentError(\"unexpected character at position \" + i, \"param\", param);\n  }\n\n  param = param.replace(/\\s/g, \" \");\n\n  function newNode(parent) {\n    var node = {\n      type: \"\",\n      name: \"\",\n      parent: parent,\n      state: {\n        allowType: true\n      }\n    };\n\n    if (allowIndexed) {\n      node.indexed = false;\n    }\n\n    return node;\n  }\n\n  var parent = {\n    type: \"\",\n    name: \"\",\n    state: {\n      allowType: true\n    }\n  };\n  var node = parent;\n\n  for (var i = 0; i < param.length; i++) {\n    var c = param[i];\n\n    switch (c) {\n      case \"(\":\n        if (node.state.allowType && node.type === \"\") {\n          node.type = \"tuple\";\n        } else if (!node.state.allowParams) {\n          throwError(i);\n        }\n\n        node.state.allowType = false;\n        node.type = verifyType(node.type);\n        node.components = [newNode(node)];\n        node = node.components[0];\n        break;\n\n      case \")\":\n        delete node.state;\n\n        if (node.name === \"indexed\") {\n          if (!allowIndexed) {\n            throwError(i);\n          }\n\n          node.indexed = true;\n          node.name = \"\";\n        }\n\n        if (checkModifier(node.type, node.name)) {\n          node.name = \"\";\n        }\n\n        node.type = verifyType(node.type);\n        var child = node;\n        node = node.parent;\n\n        if (!node) {\n          throwError(i);\n        }\n\n        delete child.parent;\n        node.state.allowParams = false;\n        node.state.allowName = true;\n        node.state.allowArray = true;\n        break;\n\n      case \",\":\n        delete node.state;\n\n        if (node.name === \"indexed\") {\n          if (!allowIndexed) {\n            throwError(i);\n          }\n\n          node.indexed = true;\n          node.name = \"\";\n        }\n\n        if (checkModifier(node.type, node.name)) {\n          node.name = \"\";\n        }\n\n        node.type = verifyType(node.type);\n        var sibling = newNode(node.parent); //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n\n        node.parent.components.push(sibling);\n        delete node.parent;\n        node = sibling;\n        break;\n      // Hit a space...\n\n      case \" \":\n        // If reading type, the type is done and may read a param or name\n        if (node.state.allowType) {\n          if (node.type !== \"\") {\n            node.type = verifyType(node.type);\n            delete node.state.allowType;\n            node.state.allowName = true;\n            node.state.allowParams = true;\n          }\n        } // If reading name, the name is done\n\n\n        if (node.state.allowName) {\n          if (node.name !== \"\") {\n            if (node.name === \"indexed\") {\n              if (!allowIndexed) {\n                throwError(i);\n              }\n\n              if (node.indexed) {\n                throwError(i);\n              }\n\n              node.indexed = true;\n              node.name = \"\";\n            } else if (checkModifier(node.type, node.name)) {\n              node.name = \"\";\n            } else {\n              node.state.allowName = false;\n            }\n          }\n        }\n\n        break;\n\n      case \"[\":\n        if (!node.state.allowArray) {\n          throwError(i);\n        }\n\n        node.type += c;\n        node.state.allowArray = false;\n        node.state.allowName = false;\n        node.state.readArray = true;\n        break;\n\n      case \"]\":\n        if (!node.state.readArray) {\n          throwError(i);\n        }\n\n        node.type += c;\n        node.state.readArray = false;\n        node.state.allowArray = true;\n        node.state.allowName = true;\n        break;\n\n      default:\n        if (node.state.allowType) {\n          node.type += c;\n          node.state.allowParams = true;\n          node.state.allowArray = true;\n        } else if (node.state.allowName) {\n          node.name += c;\n          delete node.state.allowArray;\n        } else if (node.state.readArray) {\n          node.type += c;\n        } else {\n          throwError(i);\n        }\n\n    }\n  }\n\n  if (node.parent) {\n    logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n  }\n\n  delete parent.state;\n\n  if (node.name === \"indexed\") {\n    if (!allowIndexed) {\n      throwError(originalParam.length - 7);\n    }\n\n    if (node.indexed) {\n      throwError(originalParam.length - 7);\n    }\n\n    node.indexed = true;\n    node.name = \"\";\n  } else if (checkModifier(node.type, node.name)) {\n    node.name = \"\";\n  }\n\n  parent.type = verifyType(parent.type);\n  return parent;\n}\n\nfunction populate(object, params) {\n  for (var key in params) {\n    properties_1.defineReadOnly(object, key, params[key]);\n  }\n}\n\nexports.FormatTypes = Object.freeze({\n  // Bare formatting, as is needed for computing a sighash of an event or function\n  sighash: \"sighash\",\n  // Human-Readable with Minimal spacing and without names (compact human-readable)\n  minimal: \"minimal\",\n  // Human-Readble with nice spacing, including all names\n  full: \"full\",\n  // JSON-format a la Solidity\n  json: \"json\"\n});\nvar paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\nvar ParamType =\n/** @class */\nfunction () {\n  function ParamType(constructorGuard, params) {\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"use fromString\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new ParamType()\"\n      });\n    }\n\n    populate(this, params);\n    var match = this.type.match(paramTypeArray);\n\n    if (match) {\n      populate(this, {\n        arrayLength: parseInt(match[2] || \"-1\"),\n        arrayChildren: ParamType.fromObject({\n          type: match[1],\n          components: this.components\n        }),\n        baseType: \"array\"\n      });\n    } else {\n      populate(this, {\n        arrayLength: null,\n        arrayChildren: null,\n        baseType: this.components != null ? \"tuple\" : this.type\n      });\n    }\n\n    this._isParamType = true;\n    Object.freeze(this);\n  } // Format the parameter fragment\n  //   - sighash: \"(uint256,address)\"\n  //   - minimal: \"tuple(uint256,address) indexed\"\n  //   - full:    \"tuple(uint256 foo, addres bar) indexed baz\"\n\n\n  ParamType.prototype.format = function (format) {\n    if (!format) {\n      format = exports.FormatTypes.sighash;\n    }\n\n    if (!exports.FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n\n    if (format === exports.FormatTypes.json) {\n      var result_1 = {\n        type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n        name: this.name || undefined\n      };\n\n      if (typeof this.indexed === \"boolean\") {\n        result_1.indexed = this.indexed;\n      }\n\n      if (this.components) {\n        result_1.components = this.components.map(function (comp) {\n          return JSON.parse(comp.format(format));\n        });\n      }\n\n      return JSON.stringify(result_1);\n    }\n\n    var result = \"\"; // Array\n\n    if (this.baseType === \"array\") {\n      result += this.arrayChildren.format(format);\n      result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n    } else {\n      if (this.baseType === \"tuple\") {\n        if (format !== exports.FormatTypes.sighash) {\n          result += this.type;\n        }\n\n        result += \"(\" + this.components.map(function (comp) {\n          return comp.format(format);\n        }).join(format === exports.FormatTypes.full ? \", \" : \",\") + \")\";\n      } else {\n        result += this.type;\n      }\n    }\n\n    if (format !== exports.FormatTypes.sighash) {\n      if (this.indexed === true) {\n        result += \" indexed\";\n      }\n\n      if (format === exports.FormatTypes.full && this.name) {\n        result += \" \" + this.name;\n      }\n    }\n\n    return result;\n  };\n\n  ParamType.from = function (value, allowIndexed) {\n    if (typeof value === \"string\") {\n      return ParamType.fromString(value, allowIndexed);\n    }\n\n    return ParamType.fromObject(value);\n  };\n\n  ParamType.fromObject = function (value) {\n    if (ParamType.isParamType(value)) {\n      return value;\n    }\n\n    return new ParamType(_constructorGuard, {\n      name: value.name || null,\n      type: verifyType(value.type),\n      indexed: value.indexed == null ? null : !!value.indexed,\n      components: value.components ? value.components.map(ParamType.fromObject) : null\n    });\n  };\n\n  ParamType.fromString = function (value, allowIndexed) {\n    function ParamTypify(node) {\n      return ParamType.fromObject({\n        name: node.name,\n        type: node.type,\n        indexed: node.indexed,\n        components: node.components\n      });\n    }\n\n    return ParamTypify(parseParamType(value, !!allowIndexed));\n  };\n\n  ParamType.isParamType = function (value) {\n    return !!(value != null && value._isParamType);\n  };\n\n  return ParamType;\n}();\n\nexports.ParamType = ParamType;\n;\n\nfunction parseParams(value, allowIndex) {\n  return splitNesting(value).map(function (param) {\n    return ParamType.fromString(param, allowIndex);\n  });\n}\n\nvar Fragment =\n/** @class */\nfunction () {\n  function Fragment(constructorGuard, params) {\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"use a static from method\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new Fragment()\"\n      });\n    }\n\n    populate(this, params);\n    this._isFragment = true;\n    Object.freeze(this);\n  }\n\n  Fragment.from = function (value) {\n    if (Fragment.isFragment(value)) {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      return Fragment.fromString(value);\n    }\n\n    return Fragment.fromObject(value);\n  };\n\n  Fragment.fromObject = function (value) {\n    if (Fragment.isFragment(value)) {\n      return value;\n    }\n\n    switch (value.type) {\n      case \"function\":\n        return FunctionFragment.fromObject(value);\n\n      case \"event\":\n        return EventFragment.fromObject(value);\n\n      case \"constructor\":\n        return ConstructorFragment.fromObject(value);\n\n      case \"error\":\n      case \"fallback\":\n      case \"receive\":\n        // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n        return null;\n    }\n\n    return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n  };\n\n  Fragment.fromString = function (value) {\n    // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n    value = value.replace(/\\s/g, \" \");\n    value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n    value = value.trim();\n\n    if (value.split(\" \")[0] === \"event\") {\n      return EventFragment.fromString(value.substring(5).trim());\n    } else if (value.split(\" \")[0] === \"function\") {\n      return FunctionFragment.fromString(value.substring(8).trim());\n    } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n      return ConstructorFragment.fromString(value.trim());\n    }\n\n    return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n  };\n\n  Fragment.isFragment = function (value) {\n    return !!(value && value._isFragment);\n  };\n\n  return Fragment;\n}();\n\nexports.Fragment = Fragment;\n\nvar EventFragment =\n/** @class */\nfunction (_super) {\n  __extends(EventFragment, _super);\n\n  function EventFragment() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  EventFragment.prototype.format = function (format) {\n    if (!format) {\n      format = exports.FormatTypes.sighash;\n    }\n\n    if (!exports.FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n\n    if (format === exports.FormatTypes.json) {\n      return JSON.stringify({\n        type: \"event\",\n        anonymous: this.anonymous,\n        name: this.name,\n        inputs: this.inputs.map(function (input) {\n          return JSON.parse(input.format(format));\n        })\n      });\n    }\n\n    var result = \"\";\n\n    if (format !== exports.FormatTypes.sighash) {\n      result += \"event \";\n    }\n\n    result += this.name + \"(\" + this.inputs.map(function (input) {\n      return input.format(format);\n    }).join(format === exports.FormatTypes.full ? \", \" : \",\") + \") \";\n\n    if (format !== exports.FormatTypes.sighash) {\n      if (this.anonymous) {\n        result += \"anonymous \";\n      }\n    }\n\n    return result.trim();\n  };\n\n  EventFragment.from = function (value) {\n    if (typeof value === \"string\") {\n      return EventFragment.fromString(value);\n    }\n\n    return EventFragment.fromObject(value);\n  };\n\n  EventFragment.fromObject = function (value) {\n    if (EventFragment.isEventFragment(value)) {\n      return value;\n    }\n\n    if (value.type !== \"event\") {\n      logger.throwArgumentError(\"invalid event object\", \"value\", value);\n    }\n\n    var params = {\n      name: verifyIdentifier(value.name),\n      anonymous: value.anonymous,\n      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n      type: \"event\"\n    };\n    return new EventFragment(_constructorGuard, params);\n  };\n\n  EventFragment.fromString = function (value) {\n    var match = value.match(regexParen);\n\n    if (!match) {\n      logger.throwArgumentError(\"invalid event string\", \"value\", value);\n    }\n\n    var anonymous = false;\n    match[3].split(\" \").forEach(function (modifier) {\n      switch (modifier.trim()) {\n        case \"anonymous\":\n          anonymous = true;\n          break;\n\n        case \"\":\n          break;\n\n        default:\n          logger.warn(\"unknown modifier: \" + modifier);\n      }\n    });\n    return EventFragment.fromObject({\n      name: match[1].trim(),\n      anonymous: anonymous,\n      inputs: parseParams(match[2], true),\n      type: \"event\"\n    });\n  };\n\n  EventFragment.isEventFragment = function (value) {\n    return value && value._isFragment && value.type === \"event\";\n  };\n\n  return EventFragment;\n}(Fragment);\n\nexports.EventFragment = EventFragment;\n\nfunction parseGas(value, params) {\n  params.gas = null;\n  var comps = value.split(\"@\");\n\n  if (comps.length !== 1) {\n    if (comps.length > 2) {\n      logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n    }\n\n    if (!comps[1].match(/^[0-9]+$/)) {\n      logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n    }\n\n    params.gas = bignumber_1.BigNumber.from(comps[1]);\n    return comps[0];\n  }\n\n  return value;\n}\n\nfunction parseModifiers(value, params) {\n  params.constant = false;\n  params.payable = false;\n  params.stateMutability = \"nonpayable\";\n  value.split(\" \").forEach(function (modifier) {\n    switch (modifier.trim()) {\n      case \"constant\":\n        params.constant = true;\n        break;\n\n      case \"payable\":\n        params.payable = true;\n        params.stateMutability = \"payable\";\n        break;\n\n      case \"nonpayable\":\n        params.payable = false;\n        params.stateMutability = \"nonpayable\";\n        break;\n\n      case \"pure\":\n        params.constant = true;\n        params.stateMutability = \"pure\";\n        break;\n\n      case \"view\":\n        params.constant = true;\n        params.stateMutability = \"view\";\n        break;\n\n      case \"external\":\n      case \"public\":\n      case \"\":\n        break;\n\n      default:\n        console.log(\"unknown modifier: \" + modifier);\n    }\n  });\n}\n\nfunction verifyState(value) {\n  var result = {\n    constant: false,\n    payable: true,\n    stateMutability: \"payable\"\n  };\n\n  if (value.stateMutability != null) {\n    result.stateMutability = value.stateMutability; // Set (and check things are consistent) the constant property\n\n    result.constant = result.stateMutability === \"view\" || result.stateMutability === \"pure\";\n\n    if (value.constant != null) {\n      if (!!value.constant !== result.constant) {\n        logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n      }\n    } // Set (and check things are consistent) the payable property\n\n\n    result.payable = result.stateMutability === \"payable\";\n\n    if (value.payable != null) {\n      if (!!value.payable !== result.payable) {\n        logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n      }\n    }\n  } else if (value.payable != null) {\n    result.payable = !!value.payable; // If payable we can assume non-constant; otherwise we can't assume\n\n    if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n      logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n\n    result.constant = !!value.constant;\n\n    if (result.constant) {\n      result.stateMutability = \"view\";\n    } else {\n      result.stateMutability = result.payable ? \"payable\" : \"nonpayable\";\n    }\n\n    if (result.payable && result.constant) {\n      logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n    }\n  } else if (value.constant != null) {\n    result.constant = !!value.constant;\n    result.payable = !result.constant;\n    result.stateMutability = result.constant ? \"view\" : \"payable\";\n  } else if (value.type !== \"constructor\") {\n    logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n  }\n\n  return result;\n}\n\nvar ConstructorFragment =\n/** @class */\nfunction (_super) {\n  __extends(ConstructorFragment, _super);\n\n  function ConstructorFragment() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ConstructorFragment.prototype.format = function (format) {\n    if (!format) {\n      format = exports.FormatTypes.sighash;\n    }\n\n    if (!exports.FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n\n    if (format === exports.FormatTypes.json) {\n      return JSON.stringify({\n        type: \"constructor\",\n        stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n        payable: this.payable,\n        gas: this.gas ? this.gas.toNumber() : undefined,\n        inputs: this.inputs.map(function (input) {\n          return JSON.parse(input.format(format));\n        })\n      });\n    }\n\n    if (format === exports.FormatTypes.sighash) {\n      logger.throwError(\"cannot format a constructor for sighash\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"format(sighash)\"\n      });\n    }\n\n    var result = \"constructor(\" + this.inputs.map(function (input) {\n      return input.format(format);\n    }).join(format === exports.FormatTypes.full ? \", \" : \",\") + \") \";\n\n    if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n      result += this.stateMutability + \" \";\n    }\n\n    return result.trim();\n  };\n\n  ConstructorFragment.from = function (value) {\n    if (typeof value === \"string\") {\n      return ConstructorFragment.fromString(value);\n    }\n\n    return ConstructorFragment.fromObject(value);\n  };\n\n  ConstructorFragment.fromObject = function (value) {\n    if (ConstructorFragment.isConstructorFragment(value)) {\n      return value;\n    }\n\n    if (value.type !== \"constructor\") {\n      logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n    }\n\n    var state = verifyState(value);\n\n    if (state.constant) {\n      logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n    }\n\n    var params = {\n      name: null,\n      type: value.type,\n      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n      payable: state.payable,\n      stateMutability: state.stateMutability,\n      gas: value.gas ? bignumber_1.BigNumber.from(value.gas) : null\n    };\n    return new ConstructorFragment(_constructorGuard, params);\n  };\n\n  ConstructorFragment.fromString = function (value) {\n    var params = {\n      type: \"constructor\"\n    };\n    value = parseGas(value, params);\n    var parens = value.match(regexParen);\n\n    if (!parens || parens[1].trim() !== \"constructor\") {\n      logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n    }\n\n    params.inputs = parseParams(parens[2].trim(), false);\n    parseModifiers(parens[3].trim(), params);\n    return ConstructorFragment.fromObject(params);\n  };\n\n  ConstructorFragment.isConstructorFragment = function (value) {\n    return value && value._isFragment && value.type === \"constructor\";\n  };\n\n  return ConstructorFragment;\n}(Fragment);\n\nexports.ConstructorFragment = ConstructorFragment;\n\nvar FunctionFragment =\n/** @class */\nfunction (_super) {\n  __extends(FunctionFragment, _super);\n\n  function FunctionFragment() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FunctionFragment.prototype.format = function (format) {\n    if (!format) {\n      format = exports.FormatTypes.sighash;\n    }\n\n    if (!exports.FormatTypes[format]) {\n      logger.throwArgumentError(\"invalid format type\", \"format\", format);\n    }\n\n    if (format === exports.FormatTypes.json) {\n      return JSON.stringify({\n        type: \"function\",\n        name: this.name,\n        constant: this.constant,\n        stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n        payable: this.payable,\n        gas: this.gas ? this.gas.toNumber() : undefined,\n        inputs: this.inputs.map(function (input) {\n          return JSON.parse(input.format(format));\n        }),\n        outputs: this.outputs.map(function (output) {\n          return JSON.parse(output.format(format));\n        })\n      });\n    }\n\n    var result = \"\";\n\n    if (format !== exports.FormatTypes.sighash) {\n      result += \"function \";\n    }\n\n    result += this.name + \"(\" + this.inputs.map(function (input) {\n      return input.format(format);\n    }).join(format === exports.FormatTypes.full ? \", \" : \",\") + \") \";\n\n    if (format !== exports.FormatTypes.sighash) {\n      if (this.stateMutability) {\n        if (this.stateMutability !== \"nonpayable\") {\n          result += this.stateMutability + \" \";\n        }\n      } else if (this.constant) {\n        result += \"view \";\n      }\n\n      if (this.outputs && this.outputs.length) {\n        result += \"returns (\" + this.outputs.map(function (output) {\n          return output.format(format);\n        }).join(\", \") + \") \";\n      }\n\n      if (this.gas != null) {\n        result += \"@\" + this.gas.toString() + \" \";\n      }\n    }\n\n    return result.trim();\n  };\n\n  FunctionFragment.from = function (value) {\n    if (typeof value === \"string\") {\n      return FunctionFragment.fromString(value);\n    }\n\n    return FunctionFragment.fromObject(value);\n  };\n\n  FunctionFragment.fromObject = function (value) {\n    if (FunctionFragment.isFunctionFragment(value)) {\n      return value;\n    }\n\n    if (value.type !== \"function\") {\n      logger.throwArgumentError(\"invalid function object\", \"value\", value);\n    }\n\n    var state = verifyState(value);\n    var params = {\n      type: value.type,\n      name: verifyIdentifier(value.name),\n      constant: state.constant,\n      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n      outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],\n      payable: state.payable,\n      stateMutability: state.stateMutability,\n      gas: value.gas ? bignumber_1.BigNumber.from(value.gas) : null\n    };\n    return new FunctionFragment(_constructorGuard, params);\n  };\n\n  FunctionFragment.fromString = function (value) {\n    var params = {\n      type: \"function\"\n    };\n    value = parseGas(value, params);\n    var comps = value.split(\" returns \");\n\n    if (comps.length > 2) {\n      logger.throwArgumentError(\"invalid function string\", \"value\", value);\n    }\n\n    var parens = comps[0].match(regexParen);\n\n    if (!parens) {\n      logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n    }\n\n    params.name = parens[1].trim();\n\n    if (params.name) {\n      verifyIdentifier(params.name);\n    }\n\n    params.inputs = parseParams(parens[2], false);\n    parseModifiers(parens[3].trim(), params); // We have outputs\n\n    if (comps.length > 1) {\n      var returns = comps[1].match(regexParen);\n\n      if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n        logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n      }\n\n      params.outputs = parseParams(returns[2], false);\n    } else {\n      params.outputs = [];\n    }\n\n    return FunctionFragment.fromObject(params);\n  };\n\n  FunctionFragment.isFunctionFragment = function (value) {\n    return value && value._isFragment && value.type === \"function\";\n  };\n\n  return FunctionFragment;\n}(ConstructorFragment);\n\nexports.FunctionFragment = FunctionFragment; //export class ErrorFragment extends Fragment {\n//}\n//export class StructFragment extends Fragment {\n//}\n\nfunction verifyType(type) {\n  // These need to be transformed to their full description\n  if (type.match(/^uint($|[^1-9])/)) {\n    type = \"uint256\" + type.substring(4);\n  } else if (type.match(/^int($|[^1-9])/)) {\n    type = \"int256\" + type.substring(3);\n  } // @TODO: more verification\n\n\n  return type;\n}\n\nvar regexIdentifier = new RegExp(\"^[A-Za-z_][A-Za-z0-9_]*$\");\n\nfunction verifyIdentifier(value) {\n  if (!value || !value.match(regexIdentifier)) {\n    logger.throwArgumentError(\"invalid identifier \\\"\" + value + \"\\\"\", \"value\", value);\n  }\n\n  return value;\n}\n\nvar regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n\nfunction splitNesting(value) {\n  value = value.trim();\n  var result = [];\n  var accum = \"\";\n  var depth = 0;\n\n  for (var offset = 0; offset < value.length; offset++) {\n    var c = value[offset];\n\n    if (c === \",\" && depth === 0) {\n      result.push(accum);\n      accum = \"\";\n    } else {\n      accum += c;\n\n      if (c === \"(\") {\n        depth++;\n      } else if (c === \")\") {\n        depth--;\n\n        if (depth === -1) {\n          logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n        }\n      }\n    }\n  }\n\n  if (accum) {\n    result.push(accum);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../src.ts/fragments.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FunctionFragment = exports.ConstructorFragment = exports.EventFragment = exports.Fragment = exports.ParamType = exports.FormatTypes = void 0;\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\nvar properties_1 = require(\"@ethersproject/properties\");\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\n;\nvar _constructorGuard = {};\nvar ModifiersBytes = { calldata: true, memory: true, storage: true };\nvar ModifiersNest = { calldata: true, memory: true };\nfunction checkModifier(type, name) {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) {\n            return true;\n        }\n    }\n    else if (type === \"address\") {\n        if (name === \"payable\") {\n            return true;\n        }\n    }\n    else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) {\n            return true;\n        }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param, allowIndexed) {\n    var originalParam = param;\n    function throwError(i) {\n        logger.throwArgumentError(\"unexpected character at position \" + i, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n    function newNode(parent) {\n        var node = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) {\n            node.indexed = false;\n        }\n        return node;\n    }\n    var parent = { type: \"\", name: \"\", state: { allowType: true } };\n    var node = parent;\n    for (var i = 0; i < param.length; i++) {\n        var c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                }\n                else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [newNode(node)];\n                node = node.components[0];\n                break;\n            case \")\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                var child = node;\n                node = node.parent;\n                if (!node) {\n                    throwError(i);\n                }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n            case \",\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                var sibling = newNode(node.parent);\n                //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n            // Hit a space...\n            case \" \":\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) {\n                                throwError(i);\n                            }\n                            if (node.indexed) {\n                                throwError(i);\n                            }\n                            node.indexed = true;\n                            node.name = \"\";\n                        }\n                        else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        }\n                        else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n                break;\n            case \"[\":\n                if (!node.state.allowArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n            case \"]\":\n                if (!node.state.readArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                }\n                else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                }\n                else if (node.state.readArray) {\n                    node.type += c;\n                }\n                else {\n                    throwError(i);\n                }\n        }\n    }\n    if (node.parent) {\n        logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n    }\n    delete parent.state;\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) {\n            throwError(originalParam.length - 7);\n        }\n        if (node.indexed) {\n            throwError(originalParam.length - 7);\n        }\n        node.indexed = true;\n        node.name = \"\";\n    }\n    else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n    parent.type = verifyType(parent.type);\n    return parent;\n}\nfunction populate(object, params) {\n    for (var key in params) {\n        properties_1.defineReadOnly(object, key, params[key]);\n    }\n}\nexports.FormatTypes = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n    // Human-Readble with nice spacing, including all names\n    full: \"full\",\n    // JSON-format a la Solidity\n    json: \"json\"\n});\nvar paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nvar ParamType = /** @class */ (function () {\n    function ParamType(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use fromString\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new ParamType()\"\n            });\n        }\n        populate(this, params);\n        var match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        }\n        else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\" : this.type)\n            });\n        }\n        this._isParamType = true;\n        Object.freeze(this);\n    }\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, addres bar) indexed baz\"\n    ParamType.prototype.format = function (format) {\n        if (!format) {\n            format = exports.FormatTypes.sighash;\n        }\n        if (!exports.FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === exports.FormatTypes.json) {\n            var result_1 = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result_1.indexed = this.indexed;\n            }\n            if (this.components) {\n                result_1.components = this.components.map(function (comp) { return JSON.parse(comp.format(format)); });\n            }\n            return JSON.stringify(result_1);\n        }\n        var result = \"\";\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n        }\n        else {\n            if (this.baseType === \"tuple\") {\n                if (format !== exports.FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map(function (comp) { return comp.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== exports.FormatTypes.sighash) {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === exports.FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    };\n    ParamType.from = function (value, allowIndexed) {\n        if (typeof (value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    };\n    ParamType.fromObject = function (value) {\n        if (ParamType.isParamType(value)) {\n            return value;\n        }\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null : !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject) : null)\n        });\n    };\n    ParamType.fromString = function (value, allowIndexed) {\n        function ParamTypify(node) {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    };\n    ParamType.isParamType = function (value) {\n        return !!(value != null && value._isParamType);\n    };\n    return ParamType;\n}());\nexports.ParamType = ParamType;\n;\nfunction parseParams(value, allowIndex) {\n    return splitNesting(value).map(function (param) { return ParamType.fromString(param, allowIndex); });\n}\nvar Fragment = /** @class */ (function () {\n    function Fragment(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n        this._isFragment = true;\n        Object.freeze(this);\n    }\n    Fragment.from = function (value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n        return Fragment.fromObject(value);\n    };\n    Fragment.fromObject = function (value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    };\n    Fragment.fromString = function (value) {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n        if (value.split(\" \")[0] === \"event\") {\n            return EventFragment.fromString(value.substring(5).trim());\n        }\n        else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        }\n        else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        }\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    };\n    Fragment.isFragment = function (value) {\n        return !!(value && value._isFragment);\n    };\n    return Fragment;\n}());\nexports.Fragment = Fragment;\nvar EventFragment = /** @class */ (function (_super) {\n    __extends(EventFragment, _super);\n    function EventFragment() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    EventFragment.prototype.format = function (format) {\n        if (!format) {\n            format = exports.FormatTypes.sighash;\n        }\n        if (!exports.FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === exports.FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })\n            });\n        }\n        var result = \"\";\n        if (format !== exports.FormatTypes.sighash) {\n            result += \"event \";\n        }\n        result += this.name + \"(\" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== exports.FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n        return result.trim();\n    };\n    EventFragment.from = function (value) {\n        if (typeof (value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    };\n    EventFragment.fromObject = function (value) {\n        if (EventFragment.isEventFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n        var params = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n        return new EventFragment(_constructorGuard, params);\n    };\n    EventFragment.fromString = function (value) {\n        var match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n        var anonymous = false;\n        match[3].split(\" \").forEach(function (modifier) {\n            switch (modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    };\n    EventFragment.isEventFragment = function (value) {\n        return (value && value._isFragment && value.type === \"event\");\n    };\n    return EventFragment;\n}(Fragment));\nexports.EventFragment = EventFragment;\nfunction parseGas(value, params) {\n    params.gas = null;\n    var comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = bignumber_1.BigNumber.from(comps[1]);\n        return comps[0];\n    }\n    return value;\n}\nfunction parseModifiers(value, params) {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n    value.split(\" \").forEach(function (modifier) {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\nfunction verifyState(value) {\n    var result = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n    }\n    else if (value.payable != null) {\n        result.payable = !!value.payable;\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n        result.constant = !!value.constant;\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        }\n        else {\n            result.stateMutability = (result.payable ? \"payable\" : \"nonpayable\");\n        }\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n    }\n    else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\" : \"payable\");\n    }\n    else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    return result;\n}\nvar ConstructorFragment = /** @class */ (function (_super) {\n    __extends(ConstructorFragment, _super);\n    function ConstructorFragment() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ConstructorFragment.prototype.format = function (format) {\n        if (!format) {\n            format = exports.FormatTypes.sighash;\n        }\n        if (!exports.FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === exports.FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); })\n            });\n        }\n        if (format === exports.FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n        var result = \"constructor(\" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n        return result.trim();\n    };\n    ConstructorFragment.from = function (value) {\n        if (typeof (value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    };\n    ConstructorFragment.fromObject = function (value) {\n        if (ConstructorFragment.isConstructorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n        var state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n        var params = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? bignumber_1.BigNumber.from(value.gas) : null)\n        };\n        return new ConstructorFragment(_constructorGuard, params);\n    };\n    ConstructorFragment.fromString = function (value) {\n        var params = { type: \"constructor\" };\n        value = parseGas(value, params);\n        var parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n        params.inputs = parseParams(parens[2].trim(), false);\n        parseModifiers(parens[3].trim(), params);\n        return ConstructorFragment.fromObject(params);\n    };\n    ConstructorFragment.isConstructorFragment = function (value) {\n        return (value && value._isFragment && value.type === \"constructor\");\n    };\n    return ConstructorFragment;\n}(Fragment));\nexports.ConstructorFragment = ConstructorFragment;\nvar FunctionFragment = /** @class */ (function (_super) {\n    __extends(FunctionFragment, _super);\n    function FunctionFragment() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    FunctionFragment.prototype.format = function (format) {\n        if (!format) {\n            format = exports.FormatTypes.sighash;\n        }\n        if (!exports.FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === exports.FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map(function (input) { return JSON.parse(input.format(format)); }),\n                outputs: this.outputs.map(function (output) { return JSON.parse(output.format(format)); }),\n            });\n        }\n        var result = \"\";\n        if (format !== exports.FormatTypes.sighash) {\n            result += \"function \";\n        }\n        result += this.name + \"(\" + this.inputs.map(function (input) { return input.format(format); }).join((format === exports.FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== exports.FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            }\n            else if (this.constant) {\n                result += \"view \";\n            }\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map(function (output) { return output.format(format); }).join(\", \") + \") \";\n            }\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n        return result.trim();\n    };\n    FunctionFragment.from = function (value) {\n        if (typeof (value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    };\n    FunctionFragment.fromObject = function (value) {\n        if (FunctionFragment.isFunctionFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n        var state = verifyState(value);\n        var params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? bignumber_1.BigNumber.from(value.gas) : null)\n        };\n        return new FunctionFragment(_constructorGuard, params);\n    };\n    FunctionFragment.fromString = function (value) {\n        var params = { type: \"function\" };\n        value = parseGas(value, params);\n        var comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n        var parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        parseModifiers(parens[3].trim(), params);\n        // We have outputs\n        if (comps.length > 1) {\n            var returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        }\n        else {\n            params.outputs = [];\n        }\n        return FunctionFragment.fromObject(params);\n    };\n    FunctionFragment.isFunctionFragment = function (value) {\n        return (value && value._isFragment && value.type === \"function\");\n    };\n    return FunctionFragment;\n}(ConstructorFragment));\nexports.FunctionFragment = FunctionFragment;\n//export class ErrorFragment extends Fragment {\n//}\n//export class StructFragment extends Fragment {\n//}\nfunction verifyType(type) {\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    }\n    else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n    // @TODO: more verification\n    return type;\n}\nvar regexIdentifier = new RegExp(\"^[A-Za-z_][A-Za-z0-9_]*$\");\nfunction verifyIdentifier(value) {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(\"invalid identifier \\\"\" + value + \"\\\"\", \"value\", value);\n    }\n    return value;\n}\nvar regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nfunction splitNesting(value) {\n    value = value.trim();\n    var result = [];\n    var accum = \"\";\n    var depth = 0;\n    for (var offset = 0; offset < value.length; offset++) {\n        var c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        }\n        else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            }\n            else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) {\n        result.push(accum);\n    }\n    return result;\n}\n//# sourceMappingURL=fragments.js.map"]},"metadata":{},"sourceType":"script"}