{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayCoder = exports.unpack = exports.pack = void 0;\n\nvar logger_1 = require(\"@ethersproject/logger\");\n\nvar _version_1 = require(\"../_version\");\n\nvar logger = new logger_1.Logger(_version_1.version);\n\nvar abstract_coder_1 = require(\"./abstract-coder\");\n\nvar anonymous_1 = require(\"./anonymous\");\n\nfunction pack(writer, coders, values) {\n  var arrayValues = null;\n\n  if (Array.isArray(values)) {\n    arrayValues = values;\n  } else if (values && typeof values === \"object\") {\n    var unique_1 = {};\n    arrayValues = coders.map(function (coder) {\n      var name = coder.localName;\n\n      if (!name) {\n        logger.throwError(\"cannot encode object for signature with missing names\", logger_1.Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n\n      if (unique_1[name]) {\n        logger.throwError(\"cannot encode object for signature with duplicate names\", logger_1.Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n\n      unique_1[name] = true;\n      return values[name];\n    });\n  } else {\n    logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n  }\n\n  if (coders.length !== arrayValues.length) {\n    logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n  }\n\n  var staticWriter = new abstract_coder_1.Writer(writer.wordSize);\n  var dynamicWriter = new abstract_coder_1.Writer(writer.wordSize);\n  var updateFuncs = [];\n  coders.forEach(function (coder, index) {\n    var value = arrayValues[index];\n\n    if (coder.dynamic) {\n      // Get current dynamic offset (for the future pointer)\n      var dynamicOffset_1 = dynamicWriter.length; // Encode the dynamic value into the dynamicWriter\n\n      coder.encode(dynamicWriter, value); // Prepare to populate the correct offset once we are done\n\n      var updateFunc_1 = staticWriter.writeUpdatableValue();\n      updateFuncs.push(function (baseOffset) {\n        updateFunc_1(baseOffset + dynamicOffset_1);\n      });\n    } else {\n      coder.encode(staticWriter, value);\n    }\n  }); // Backfill all the dynamic offsets, now that we know the static length\n\n  updateFuncs.forEach(function (func) {\n    func(staticWriter.length);\n  });\n  var length = writer.appendWriter(staticWriter);\n  length += writer.appendWriter(dynamicWriter);\n  return length;\n}\n\nexports.pack = pack;\n\nfunction unpack(reader, coders) {\n  var values = []; // A reader anchored to this base\n\n  var baseReader = reader.subReader(0);\n  coders.forEach(function (coder) {\n    var value = null;\n\n    if (coder.dynamic) {\n      var offset = reader.readValue();\n      var offsetReader = baseReader.subReader(offset.toNumber());\n\n      try {\n        value = coder.decode(offsetReader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === logger_1.Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    } else {\n      try {\n        value = coder.decode(reader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === logger_1.Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    }\n\n    if (value != undefined) {\n      values.push(value);\n    }\n  }); // We only output named properties for uniquely named coders\n\n  var uniqueNames = coders.reduce(function (accum, coder) {\n    var name = coder.localName;\n\n    if (name) {\n      if (!accum[name]) {\n        accum[name] = 0;\n      }\n\n      accum[name]++;\n    }\n\n    return accum;\n  }, {}); // Add any named parameters (i.e. tuples)\n\n  coders.forEach(function (coder, index) {\n    var name = coder.localName;\n\n    if (!name || uniqueNames[name] !== 1) {\n      return;\n    }\n\n    if (name === \"length\") {\n      name = \"_length\";\n    }\n\n    if (values[name] != null) {\n      return;\n    }\n\n    var value = values[index];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, name, {\n        get: function () {\n          throw value;\n        }\n      });\n    } else {\n      values[name] = value;\n    }\n  });\n\n  var _loop_1 = function (i) {\n    var value = values[i];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, i, {\n        get: function () {\n          throw value;\n        }\n      });\n    }\n  };\n\n  for (var i = 0; i < values.length; i++) {\n    _loop_1(i);\n  }\n\n  return Object.freeze(values);\n}\n\nexports.unpack = unpack;\n\nvar ArrayCoder =\n/** @class */\nfunction (_super) {\n  __extends(ArrayCoder, _super);\n\n  function ArrayCoder(coder, length, localName) {\n    var _this = this;\n\n    var type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n    var dynamic = length === -1 || coder.dynamic;\n    _this = _super.call(this, \"array\", type, localName, dynamic) || this;\n    _this.coder = coder;\n    _this.length = length;\n    return _this;\n  }\n\n  ArrayCoder.prototype.defaultValue = function () {\n    // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n    var defaultChild = this.coder.defaultValue();\n    var result = [];\n\n    for (var i = 0; i < this.length; i++) {\n      result.push(defaultChild);\n    }\n\n    return result;\n  };\n\n  ArrayCoder.prototype.encode = function (writer, value) {\n    if (!Array.isArray(value)) {\n      this._throwError(\"expected array value\", value);\n    }\n\n    var count = this.length;\n\n    if (count === -1) {\n      count = value.length;\n      writer.writeValue(value.length);\n    }\n\n    logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n    var coders = [];\n\n    for (var i = 0; i < value.length; i++) {\n      coders.push(this.coder);\n    }\n\n    return pack(writer, coders, value);\n  };\n\n  ArrayCoder.prototype.decode = function (reader) {\n    var count = this.length;\n\n    if (count === -1) {\n      count = reader.readValue().toNumber(); // Check that there is *roughly* enough data to ensure\n      // stray random data is not being read as a length. Each\n      // slot requires at least 32 bytes for their value (or 32\n      // bytes as a link to the data). This could use a much\n      // tighter bound, but we are erroring on the side of safety.\n\n      if (count * 32 > reader._data.length) {\n        logger.throwError(\"insufficient data length\", logger_1.Logger.errors.BUFFER_OVERRUN, {\n          length: reader._data.length,\n          count: count\n        });\n      }\n    }\n\n    var coders = [];\n\n    for (var i = 0; i < count; i++) {\n      coders.push(new anonymous_1.AnonymousCoder(this.coder));\n    }\n\n    return reader.coerce(this.name, unpack(reader, coders));\n  };\n\n  return ArrayCoder;\n}(abstract_coder_1.Coder);\n\nexports.ArrayCoder = ArrayCoder;","map":{"version":3,"sources":["../../src.ts/coders/array.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayCoder = exports.unpack = exports.pack = void 0;\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"../_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar abstract_coder_1 = require(\"./abstract-coder\");\nvar anonymous_1 = require(\"./anonymous\");\nfunction pack(writer, coders, values) {\n    var arrayValues = null;\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        var unique_1 = {};\n        arrayValues = coders.map(function (coder) {\n            var name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", logger_1.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            if (unique_1[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", logger_1.Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            unique_1[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    var staticWriter = new abstract_coder_1.Writer(writer.wordSize);\n    var dynamicWriter = new abstract_coder_1.Writer(writer.wordSize);\n    var updateFuncs = [];\n    coders.forEach(function (coder, index) {\n        var value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            var dynamicOffset_1 = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            var updateFunc_1 = staticWriter.writeUpdatableValue();\n            updateFuncs.push(function (baseOffset) {\n                updateFunc_1(baseOffset + dynamicOffset_1);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach(function (func) { func(staticWriter.length); });\n    var length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nexports.pack = pack;\nfunction unpack(reader, coders) {\n    var values = [];\n    // A reader anchored to this base\n    var baseReader = reader.subReader(0);\n    coders.forEach(function (coder) {\n        var value = null;\n        if (coder.dynamic) {\n            var offset = reader.readValue();\n            var offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === logger_1.Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === logger_1.Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // We only output named properties for uniquely named coders\n    var uniqueNames = coders.reduce(function (accum, coder) {\n        var name = coder.localName;\n        if (name) {\n            if (!accum[name]) {\n                accum[name] = 0;\n            }\n            accum[name]++;\n        }\n        return accum;\n    }, {});\n    // Add any named parameters (i.e. tuples)\n    coders.forEach(function (coder, index) {\n        var name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        var value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                get: function () { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    var _loop_1 = function (i) {\n        var value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                get: function () { throw value; }\n            });\n        }\n    };\n    for (var i = 0; i < values.length; i++) {\n        _loop_1(i);\n    }\n    return Object.freeze(values);\n}\nexports.unpack = unpack;\nvar ArrayCoder = /** @class */ (function (_super) {\n    __extends(ArrayCoder, _super);\n    function ArrayCoder(coder, length, localName) {\n        var _this = this;\n        var type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        var dynamic = (length === -1 || coder.dynamic);\n        _this = _super.call(this, \"array\", type, localName, dynamic) || this;\n        _this.coder = coder;\n        _this.length = length;\n        return _this;\n    }\n    ArrayCoder.prototype.defaultValue = function () {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        var defaultChild = this.coder.defaultValue();\n        var result = [];\n        for (var i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    };\n    ArrayCoder.prototype.encode = function (writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        var count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        var coders = [];\n        for (var i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    };\n    ArrayCoder.prototype.decode = function (reader) {\n        var count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", logger_1.Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        var coders = [];\n        for (var i = 0; i < count; i++) {\n            coders.push(new anonymous_1.AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    };\n    return ArrayCoder;\n}(abstract_coder_1.Coder));\nexports.ArrayCoder = ArrayCoder;\n//# sourceMappingURL=array.js.map"]},"metadata":{},"sourceType":"script"}