{"ast":null,"code":"var _jsxFileName = \"/Users/ma/Desktop/ReactHardhat-NFTBid/frontend/src/components/walletInfo/index.jsx\";\nimport React from \"react\"; // We'll use ethers to interact with the Ethereum network and our contract\n\nimport { ethers } from \"ethers\";\nimport { NoWalletDetected } from \"../noWalletDetected\";\nimport { Loading } from \"../loading\";\nimport TokenArtifact from \"../../contracts/Token.json\";\nimport contractAddress from \"../../contracts/contract-address.json\";\nimport { BunnyCard } from \"../bunnyCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class WalletInfo extends React.Component {\n  constructor(props) {\n    super(props); // We store multiple things in Dapp's state.\n    // You don't need to follow this pattern, but it's an useful example.\n\n    this.initialState = {\n      // The info of the token (i.e. It's Name and symbol)\n      tokenData: undefined,\n      // The user's address and balance\n      selectedAddress: undefined,\n      balance: undefined,\n      // The ID about transactions being sent, and any possible error with them\n      txBeingSent: undefined,\n      transactionError: undefined,\n      networkError: undefined\n    };\n    this.state = this.initialState;\n  }\n\n  render() {\n    if (window.ethereum === undefined) {\n      return /*#__PURE__*/_jsxDEV(NoWalletDetected, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 20\n      }, this);\n    }\n\n    if (!this.state.tokenData || !this.state.balance) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: [this.state.tokenData.name, \" (\", this.state.tokenData.symbol, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Welcome \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: this.state.selectedAddress\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 41\n              }, this), \", you have\", \" \", /*#__PURE__*/_jsxDEV(\"b\", {\n                children: [this.state.balance.toString(), \" \", this.state.tokenData.symbol]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  componentWillUnmount() {\n    // We poll the user's balance, so we have to stop doing that when Dapp\n    // gets unmounted\n    this._stopPollingData();\n  }\n\n  async _connectWallet() {\n    // This method is run when the user clicks the Connect. It connects the\n    // dapp to the user's wallet, and initializes it.\n    // To connect to the user's wallet, we have to run this method.\n    // It returns a promise that will resolve to the user's address.\n    const [selectedAddress] = await window.ethereum.enable(); // Once we have the address, we can initialize the application.\n    // First we check the network\n\n    if (!this._checkNetwork()) {\n      return;\n    }\n\n    this._initialize(selectedAddress); // We reinitialize it whenever the user changes their account.\n\n\n    window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n      this._stopPollingData(); // `accountsChanged` event can be triggered with an undefined newAddress.\n      // This happens when the user removes the Dapp from the \"Connected\n      // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n      // To avoid errors, we reset the dapp state \n\n\n      if (newAddress === undefined) {\n        return this._resetState();\n      }\n\n      this._initialize(newAddress);\n    }); // We reset the dapp state if the network is changed\n\n    window.ethereum.on(\"networkChanged\", ([networkId]) => {\n      this._stopPollingData();\n\n      this._resetState();\n    });\n  }\n\n  _initialize(userAddress) {\n    // This method initializes the dapp\n    // We first store the user's address in the component's state\n    this.setState({\n      selectedAddress: userAddress\n    }); // Then, we initialize ethers, fetch the token's data, and start polling\n    // for the user's balance.\n    // Fetching the token data and the user's balance are specific to this\n    // sample project, but you can reuse the same initialization pattern.\n\n    this._intializeEthers();\n\n    this._getTokenData();\n\n    this._startPollingData();\n  }\n\n  async _intializeEthers() {\n    // We first initialize ethers by creating a provider using window.ethereum\n    this._provider = new ethers.providers.Web3Provider(window.ethereum); // When, we initialize the contract using that provider and the token's\n    // artifact. You can do this same thing with your contracts.\n\n    this._token = new ethers.Contract(contractAddress.Token, TokenArtifact.abi, this._provider.getSigner(0));\n  } // The next to methods are needed to start and stop polling data. While\n  // the data being polled here is specific to this example, you can use this\n  // pattern to read any data from your contracts.\n  //\n  // Note that if you don't need it to update in near real time, you probably\n  // don't need to poll it. If that's the case, you can just fetch it when you\n  // initialize the app, as we do with the token data.\n\n\n  _startPollingData() {\n    this._pollDataInterval = setInterval(() => this._updateBalance(), 1000); // We run it once immediately so we don't have to wait for it\n\n    this._updateBalance();\n  }\n\n  _stopPollingData() {\n    clearInterval(this._pollDataInterval);\n    this._pollDataInterval = undefined;\n  } // The next two methods just read from the contract and store the results\n  // in the component state.\n\n\n  async _getTokenData() {\n    const name = await this._token.name();\n    const symbol = await this._token.symbol();\n    this.setState({\n      tokenData: {\n        name,\n        symbol\n      }\n    });\n  }\n\n  async _updateBalance() {\n    const balance = await this._token.balanceOf(this.state.selectedAddress);\n    this.setState({\n      balance\n    });\n  } // This method sends an ethereum transaction to transfer tokens.\n  // While this action is specific to this application, it illustrates how to\n  // send a transaction.\n\n\n  async _transferTokens(to, amount) {\n    // Sending a transaction is a complex operation:\n    //   - The user can reject it\n    //   - It can fail before reaching the ethereum network (i.e. if the user\n    //     doesn't have ETH for paying for the tx's gas)\n    //   - It has to be mined, so it isn't immediately confirmed.\n    //     Note that some testing networks, like Hardhat Network, do mine\n    //     transactions immediately, but your dapp should be prepared for\n    //     other networks.\n    //   - It can fail once mined.\n    //\n    // This method handles all of those things, so keep reading to learn how to\n    // do it.\n    try {\n      // If a transaction fails, we save that error in the component's state.\n      // We only save one such error, so before sending a second transaction, we\n      // clear it.\n      this._dismissTransactionError(); // We send the transaction, and save its hash in the Dapp's state. This\n      // way we can indicate that we are waiting for it to be mined.\n\n\n      const tx = await this._token.transfer(to, amount);\n      this.setState({\n        txBeingSent: tx.hash\n      }); // We use .wait() to wait for the transaction to be mined. This method\n      // returns the transaction's receipt.\n\n      const receipt = await tx.wait(); // The receipt, contains a status flag, which is 0 to indicate an error.\n\n      if (receipt.status === 0) {\n        // We can't know the exact error that make the transaction fail once it\n        // was mined, so we throw this generic one.\n        throw new Error(\"Transaction failed\");\n      } // If we got here, the transaction was successful, so you may want to\n      // update your state. Here, we update the user's balance.\n\n\n      await this._updateBalance();\n    } catch (error) {\n      // We check the error code to see if this error was produced because the\n      // user rejected a tx. If that's the case, we do nothing.\n      // Other errors are logged and stored in the Dapp's state. This is used to\n      // show them to the user, and for debugging.\n      console.error(error);\n      this.setState({\n        transactionError: error\n      });\n    } finally {\n      // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n      // this part of the state.\n      this.setState({\n        txBeingSent: undefined\n      });\n    }\n  } // This method just clears part of the state.\n\n\n  _dismissTransactionError() {\n    this.setState({\n      transactionError: undefined\n    });\n  } // This method just clears part of the state.\n\n\n  _dismissNetworkError() {\n    this.setState({\n      networkError: undefined\n    });\n  } // This is an utility method that turns an RPC error into a human readable\n  // message.\n\n\n  _getRpcErrorMessage(error) {\n    if (error.data) {\n      return error.data.message;\n    }\n\n    return error.message;\n  } // This method resets the state\n\n\n  _resetState() {\n    this.setState(this.initialState);\n  }\n\n}","map":{"version":3,"sources":["/Users/ma/Desktop/ReactHardhat-NFTBid/frontend/src/components/walletInfo/index.jsx"],"names":["React","ethers","NoWalletDetected","Loading","TokenArtifact","contractAddress","BunnyCard","WalletInfo","Component","constructor","props","initialState","tokenData","undefined","selectedAddress","balance","txBeingSent","transactionError","networkError","state","render","window","ethereum","name","symbol","toString","componentWillUnmount","_stopPollingData","_connectWallet","enable","_checkNetwork","_initialize","on","newAddress","_resetState","networkId","userAddress","setState","_intializeEthers","_getTokenData","_startPollingData","_provider","providers","Web3Provider","_token","Contract","Token","abi","getSigner","_pollDataInterval","setInterval","_updateBalance","clearInterval","balanceOf","_transferTokens","to","amount","_dismissTransactionError","tx","transfer","hash","receipt","wait","status","Error","error","console","_dismissNetworkError","_getRpcErrorMessage","data","message"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// We'll use ethers to interact with the Ethereum network and our contract\nimport { ethers } from \"ethers\";\nimport { NoWalletDetected } from \"../noWalletDetected\";\nimport { Loading } from \"../loading\";\nimport TokenArtifact from \"../../contracts/Token.json\";\nimport contractAddress from \"../../contracts/contract-address.json\";\nimport { BunnyCard } from \"../bunnyCard\";\n\nexport class WalletInfo extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // We store multiple things in Dapp's state.\n        // You don't need to follow this pattern, but it's an useful example.\n        this.initialState = {\n            // The info of the token (i.e. It's Name and symbol)\n            tokenData: undefined,\n            // The user's address and balance\n            selectedAddress: undefined,\n            balance: undefined,\n            // The ID about transactions being sent, and any possible error with them\n            txBeingSent: undefined,\n            transactionError: undefined,\n            networkError: undefined,\n        };\n\n        this.state = this.initialState;\n    }\n\n    render() {\n        if (window.ethereum === undefined) {\n            return <NoWalletDetected />;\n        }\n        if (!this.state.tokenData || !this.state.balance) {\n            return (\n                <div className=\"container p-4\">\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <h1>\n                                {this.state.tokenData.name} ({this.state.tokenData.symbol})\n            </h1>\n                            <p>\n                                Welcome <b>{this.state.selectedAddress}</b>, you have{\" \"}\n                                <b>\n                                    {this.state.balance.toString()} {this.state.tokenData.symbol}\n                                </b>\n\n                            </p>\n                        </div>\n                    </div>\n                    <hr />\n                </div>\n            )\n        }\n\n    }\n\n    componentWillUnmount() {\n        // We poll the user's balance, so we have to stop doing that when Dapp\n        // gets unmounted\n        this._stopPollingData();\n    }\n\n    async _connectWallet() {\n        // This method is run when the user clicks the Connect. It connects the\n        // dapp to the user's wallet, and initializes it.\n\n        // To connect to the user's wallet, we have to run this method.\n        // It returns a promise that will resolve to the user's address.\n        const [selectedAddress] = await window.ethereum.enable();\n\n        // Once we have the address, we can initialize the application.\n\n        // First we check the network\n        if (!this._checkNetwork()) {\n            return;\n        }\n\n        this._initialize(selectedAddress);\n\n        // We reinitialize it whenever the user changes their account.\n        window.ethereum.on(\"accountsChanged\", ([newAddress]) => {\n            this._stopPollingData();\n            // `accountsChanged` event can be triggered with an undefined newAddress.\n            // This happens when the user removes the Dapp from the \"Connected\n            // list of sites allowed access to your addresses\" (Metamask > Settings > Connections)\n            // To avoid errors, we reset the dapp state \n            if (newAddress === undefined) {\n                return this._resetState();\n            }\n\n            this._initialize(newAddress);\n        });\n\n        // We reset the dapp state if the network is changed\n        window.ethereum.on(\"networkChanged\", ([networkId]) => {\n            this._stopPollingData();\n            this._resetState();\n        });\n    }\n\n    _initialize(userAddress) {\n        // This method initializes the dapp\n\n        // We first store the user's address in the component's state\n        this.setState({\n            selectedAddress: userAddress,\n        });\n\n        // Then, we initialize ethers, fetch the token's data, and start polling\n        // for the user's balance.\n\n        // Fetching the token data and the user's balance are specific to this\n        // sample project, but you can reuse the same initialization pattern.\n        this._intializeEthers();\n        this._getTokenData();\n        this._startPollingData();\n    }\n\n    async _intializeEthers() {\n        // We first initialize ethers by creating a provider using window.ethereum\n        this._provider = new ethers.providers.Web3Provider(window.ethereum);\n\n        // When, we initialize the contract using that provider and the token's\n        // artifact. You can do this same thing with your contracts.\n        this._token = new ethers.Contract(\n            contractAddress.Token,\n            TokenArtifact.abi,\n            this._provider.getSigner(0)\n        );\n    }\n\n    // The next to methods are needed to start and stop polling data. While\n    // the data being polled here is specific to this example, you can use this\n    // pattern to read any data from your contracts.\n    //\n    // Note that if you don't need it to update in near real time, you probably\n    // don't need to poll it. If that's the case, you can just fetch it when you\n    // initialize the app, as we do with the token data.\n    _startPollingData() {\n        this._pollDataInterval = setInterval(() => this._updateBalance(), 1000);\n\n        // We run it once immediately so we don't have to wait for it\n        this._updateBalance();\n    }\n\n    _stopPollingData() {\n        clearInterval(this._pollDataInterval);\n        this._pollDataInterval = undefined;\n    }\n\n    // The next two methods just read from the contract and store the results\n    // in the component state.\n    async _getTokenData() {\n        const name = await this._token.name();\n        const symbol = await this._token.symbol();\n\n        this.setState({ tokenData: { name, symbol } });\n    }\n\n    async _updateBalance() {\n        const balance = await this._token.balanceOf(this.state.selectedAddress);\n        this.setState({ balance });\n    }\n\n    // This method sends an ethereum transaction to transfer tokens.\n    // While this action is specific to this application, it illustrates how to\n    // send a transaction.\n    async _transferTokens(to, amount) {\n        // Sending a transaction is a complex operation:\n        //   - The user can reject it\n        //   - It can fail before reaching the ethereum network (i.e. if the user\n        //     doesn't have ETH for paying for the tx's gas)\n        //   - It has to be mined, so it isn't immediately confirmed.\n        //     Note that some testing networks, like Hardhat Network, do mine\n        //     transactions immediately, but your dapp should be prepared for\n        //     other networks.\n        //   - It can fail once mined.\n        //\n        // This method handles all of those things, so keep reading to learn how to\n        // do it.\n\n        try {\n            // If a transaction fails, we save that error in the component's state.\n            // We only save one such error, so before sending a second transaction, we\n            // clear it.\n            this._dismissTransactionError();\n\n            // We send the transaction, and save its hash in the Dapp's state. This\n            // way we can indicate that we are waiting for it to be mined.\n            const tx = await this._token.transfer(to, amount);\n            this.setState({ txBeingSent: tx.hash });\n\n            // We use .wait() to wait for the transaction to be mined. This method\n            // returns the transaction's receipt.\n            const receipt = await tx.wait();\n\n            // The receipt, contains a status flag, which is 0 to indicate an error.\n            if (receipt.status === 0) {\n                // We can't know the exact error that make the transaction fail once it\n                // was mined, so we throw this generic one.\n                throw new Error(\"Transaction failed\");\n            }\n\n            // If we got here, the transaction was successful, so you may want to\n            // update your state. Here, we update the user's balance.\n            await this._updateBalance();\n        } catch (error) {\n            // We check the error code to see if this error was produced because the\n            // user rejected a tx. If that's the case, we do nothing.\n\n\n            // Other errors are logged and stored in the Dapp's state. This is used to\n            // show them to the user, and for debugging.\n            console.error(error);\n            this.setState({ transactionError: error });\n        } finally {\n            // If we leave the try/catch, we aren't sending a tx anymore, so we clear\n            // this part of the state.\n            this.setState({ txBeingSent: undefined });\n        }\n    }\n\n    // This method just clears part of the state.\n    _dismissTransactionError() {\n        this.setState({ transactionError: undefined });\n    }\n\n    // This method just clears part of the state.\n    _dismissNetworkError() {\n        this.setState({ networkError: undefined });\n    }\n\n    // This is an utility method that turns an RPC error into a human readable\n    // message.\n    _getRpcErrorMessage(error) {\n        if (error.data) {\n            return error.data.message;\n        }\n\n        return error.message;\n    }\n\n    // This method resets the state\n    _resetState() {\n        this.setState(this.initialState);\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}